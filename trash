//admin

namespace App\Http\Controllers;

use Illuminate\Http\RedirectResponse;
use Illuminate\Routing\Controller;
use Illuminate\View\View;

class AdminController extends Controller
{
    public function show(): RedirectResponse|View
    {
        if (empty(session('auth'))) {
            return redirect('/home');
        }
        $arguments = [];

        return view('admin');
    }
}

//GuestbookController


namespace App\Http\Controllers;

use Illuminate\Http\RedirectResponse;
use Illuminate\Routing\Controller;
use Illuminate\View\View;

class GuestbookController extends Controller
{
    public function show(): RedirectResponse|View
    {

        $aConfig = require_once '../config.php';

        $infoMessage = '';

        // 2. handle form data
        if (!empty($_POST['name']) && !empty($_POST['email']) && !empty($_POST['text'])) {

            // 3. Prepare data
            $aComment = $_POST;
            $aComment['date'] = date('Y-m-d H:i:s');

            // create new comment
            $pdo = new \PDO('mysql:host=localhost;dbname=guestbook', 'root', '');
            $sth = $pdo->query("INSERT INTO comments (email, name, text, date) VALUES ('" . $aComment['email'] . "','" . $aComment['name'] . "','" . $aComment['text'] . "','" . $aComment['date'] . "')");
            $sth = null;
            $pdo = null;
        } elseif (!empty($_POST)) {
            $infoMessage = 'Заполните поля формы!';
        }

        $arguments = [
            'infoMassage' => $infoMessage
        ];

        $this->renderView($arguments);
    }
}


//HomeController


namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\View\View;

class HomeController extends Controller
{
    public function show(): View
    {
        return view('home');
    }
}

//LoginController


namespace App\Http\Controllers;

use Illuminate\Http\RedirectResponse;
use Illuminate\View\View;

class LoginController extends Controller
{
    public function show(): RedirectResponse|View
    {
        if (empty(session('auth'))) {
            return redirect('/admin');
        }
        // 1. Create empty $infoMessage
        $infoMessage = '';

        // 2. handle form data
        if (!empty($_POST['email']) && !empty($_POST['password'])) {

            $aConfig = require_once 'config.php';

            // 3.raw. Check that user has already existed
            $pdo = new \PDO("mysql:dbname={$aConfig['name']};host={$aConfig['host']};charset={$aConfig['charset']}", $aConfig['user']);

            $pdoStatement = $pdo->query("SELECT * FROM users WHERE `email`='" . $_POST['email'] . "' AND `password`=" . "'" . sha1($_POST['password']) . "'");  // sha1 is more prefer than md5
            $user = $pdoStatement->fetch(\PDO::FETCH_ASSOC);

            if (!empty($user)) {
                $_SESSION['auth'] = true;
                header("Location: /admin");
                die;
            }

            if (empty($user)) {
                $infoMessage = "Такого пользователя не существует. Перейдите на страницу регистрации. ";
                $infoMessage .= "<a href='/register'>Страница регистрации</a>";
            }

        } elseif (!empty($_POST)) {
            $infoMessage = 'Заполните форму авторизации!';
        }

        $arguments = [
            'infoMessage' => $infoMessage
        ];

        $this->renderView($arguments);
    }
}

//LogoutController


namespace App\Http\Controllers;

use Illuminate\Http\RedirectResponse;
use Illuminate\View\View;

class LogoutController extends Controller
{
    public function show(): RedirectResponse|View
    {
        // $_SESSION['auth'] = false;
        session_destroy();
        header('Location: /');
        die;
    }

    public function renderView($arguments = [])
    {

    }
}

//RegisterController


namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\RedirectResponse;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Redirect;
use Illuminate\Support\Facades\Session;
use Illuminate\View\View;

class RegisterController extends Controller
{
    public function show(): View
    {
        // Отображение формы регистрации
        return view('register');
    }

    public function register(Request $request): Request
    {


        $infoMessage = '';

        // Обработка данных формы
        if (!empty($_POST['email']) && !empty($_POST['password'])) {
            $databaseConfig = Config::get('.env');

            // Проверка существующего пользователя
            $pdo = new \PDO(
                "mysql:dbname={$databaseConfig['name']};host={$databaseConfig['host']};charset={$databaseConfig['charset']}",
                $databaseConfig['user']
            );

            $pdoStatement = $pdo->prepare("SELECT * FROM users WHERE email=:email AND password=:password");
            $pdoStatement->execute([
                ':email' => $_POST['email'],
                ':password' => sha1($_POST['password']),
            ]);
            $user = $pdoStatement->fetch(\PDO::FETCH_ASSOC);

            if (!empty($user)) {
                $infoMessage = "Такой пользователь уже существует! Перейдите на страницу входа. ";
                $infoMessage .= "<a href='/login'>Страница входа</a>";
            } else {
                // Создание нового пользователя
                $pdoStatement = $pdo->prepare("INSERT INTO users (email, password, created_at) VALUES (:email, :password, :created_at)");
                $pdoStatement->execute([
                    ':email' => $_POST['email'],
                    ':password' => sha1($_POST['password']),
                    ':created_at' => date('Y-m-d H:i:s'),
                ]);

                return redirect('/login');
            }
        } elseif (!empty($_POST)) {
            $infoMessage = 'Заполните форму регистрации!';
        }
        if ($arguments['infoMessage']) {
            echo '<hr/>';
            echo "<span style='color:red'>{$arguments['infoMessage']}</span>";
        }

        return view('register', ['infoMessage' => $infoMessage]);
    }
}